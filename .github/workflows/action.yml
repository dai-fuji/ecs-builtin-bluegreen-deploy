# ワークフロー名
name: Deploy to Amazon ECS

# ----------------------------------------------------------------------
# ワークフローのトリガー
# ----------------------------------------------------------------------
on:
  # push:
  #   branches:
  #     - main # 'main' ブランチにプッシュされた時に実行
  workflow_dispatch: {} # 手動実行 (Actionsタブの "Run workflow") を許可

# ----------------------------------------------------------------------
# 権限の設定
# ----------------------------------------------------------------------
# AWS OIDC (OpenID Connect) 認証を使用して、
# GitHub ActionsがAWSリソースにアクセスするために必要な一時的な認証情報を取得します。
permissions:
  id-token: write # AWSへのOIDC認証トークン発行に必要
  contents: read  # リポジトリのコードをチェックアウトするために必要

# ----------------------------------------------------------------------
# ジョブの定義
# ----------------------------------------------------------------------
jobs:
  # deploy:
  #   name: Deploy to ECS
  #   runs-on: ubuntu-latest
  #   steps:
  #     # --------------------------------------------------
  #     # ステップ1: コードのチェックアウト
  #     # --------------------------------------------------
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # --------------------------------------------------
  #     # ステップ2: ビルド・SNS通知用 AWS認証の設定
  #     # --------------------------------------------------
  #     # OIDCを使用してAWSのIAMロールを引き受けます。
  #     # 事前にAWS側でOIDCプロバイダーとIAMロールの設定が必要です。
  #     # ECRは検証環境を共有するため、Assumeロールするロール名は固定です。
  #     #
  #     # 以下のシークレットを GitHub リポジトリの
  #     # [Settings] > [Secrets and variables] > [Actions] に設定してください。
  #     #
  #     # - AWS_IAM_ROLE_NAME:  GitHub Actionsが引き受けるIAMロール名
  #     - name: Configure AWS credentials Build
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::832194395201:role/fujimoto-ecs-cicd-buildandpush
  #         aws-region: ap-northeast-1

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v2

  #     # --------------------------------------------------
  #     # ステップ3: コンテナイメージのビルドとイメージのプッシュ
  #     # --------------------------------------------------
  #     # コンテナイメージのビルドとプッシュを行います。
  #     # イメージタグはlatestとコミットハッシュの2つを付与します。
  #     - name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: sakurai-test-app-ecr01
  #         IMAGE_TAG: v1.0
  #         # IMAGE_TAG: ${{ github.sha }} #TWS CircleCIはパラメータで設定
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG src/
  #         docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:latest 
  #         docker push $REPOSITORY_URI:latest
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY::latest
  #         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  #     # --------------------------------------------------
  #     # ステップ4: デプロイ用 AWS認証の設定
  #     # --------------------------------------------------
  #     # OIDCを使用してAWSのIAMロールを引き受けます。
  #     # 事前にAWS側でOIDCプロバイダーとIAMロールの設定が必要です。
  #     # デプロイは各環境にAssumeロールするロールが個別に存在していますので、環境ごとにプレフィックスが異なります。
  #     #
  #     # 以下のシークレットを GitHub リポジトリの
  #     # [Settings] > [Secrets and variables] > [Actions] に設定してください。
  #     #
  #     # - AWS_IAM_ROLE_NAME:  GitHub Actionsが引き受けるIAMロール名
  #     - name: Configure AWS credentials Deploy
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: arn:aws:iam::832194395201:role/fujimoto-deploy
  #         aws-region: ap-northeast-1

  #     # --------------------------------------------------
  #     # ステップ5: タスク定義の更新
  #     # --------------------------------------------------
  #     # amazon-ecs-render-task-definition` アクションを使い、
  #     # 新しいイメージタグをタスク定義ファイルに反映させます。
  #     # イメージタグはコミットハッシュのものを利用しています。
  #     - name: Render Amazon ECS task definition
  #       id: render-task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: taskdef/task-definition.json
  #         container-name: sakurai-test-sv-mylxs-app-ecsco01
  #         image: ${{ steps.build-image.outputs.image }} 
      
  #     # --------------------------------------------------
  #     # ステップ6: ECSタスク定義のデプロイ
  #     # --------------------------------------------------
  #     # `amazon-ecs-deploy-task-definition` を使用して、
  #     # 新しいタスク定義を登録し、サービスを更新します。
  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v2
  #       with:
  #         task-definition: ${{ steps.render-task-def.outputs.task-definition }}
  #         service: sakurai-test-sv-mylxs-app-ecsservice01
  #         cluster: sakurai-test-sv-mylxs-app-ecscluster01
  #         # (オプション) trueに設定すると、デプロイが完了し、
  #         # サービスが安定状態 (STABLE) になるまでワークフローが待機します。
  #         # デプロイ失敗時にワークフローを失敗させるために推奨されます。
  #         wait-for-service-stability: false

  #     # --------------------------------------------------
  #     # ステップ?: notify_approvalGL 検証・号口のみ 号口のタスク定義更新前に実施
  #     # --------------------------------------------------  
  nortify:
    name: SNS Nortify
    runs-on: ubuntu-latest
    steps:
      # --------------------------------------------------
      # ステップ1: ビルド・SNS通知用 AWS認証の設定
      # --------------------------------------------------
      # OIDCを使用してAWSのIAMロールを引き受けます。
      # 事前にAWS側でOIDCプロバイダーとIAMロールの設定が必要です。
      # ECRは検証環境を共有するため、Assumeロールするロール名は固定です。
      #
      # 以下のシークレットを GitHub リポジトリの
      # [Settings] > [Secrets and variables] > [Actions] に設定してください。
      #
      # - AWS_IAM_ROLE_NAME:  GitHub Actionsが引き受けるIAMロール名
      - name: Configure AWS credentials Build
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::832194395201:role/fujimoto-ecs-cicd-buildandpush
          aws-region: ap-northeast-1

      - name: Send email to GL approver
        run: |
          # メッセージ本文を作成
          # CircleCI変数をGitHub Actions変数に置換
          # $CIRCLE_USERNAME -> ${{ github.actor }}
          # $CIRCLE_WORKFLOW_ID -> ${{ github.run_id }}
          # $CIRCLE_PROJECT_USERNAME -> ${{ github.repository_owner }}
          # 承認URLをGitHub Actionsの実行URLに変更
          MESSAGE_BODY="申請ユーザー:${{ github.actor }}
          号口環境へ配信の承認をお願いします。
          【承認URL】 https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          配信内容の詳細は、申請ユーザーより別途ご説明させていただきます。
          Github organization:${{ github.repository_owner }}"

          # トピックARNを構築
          TOPIC_ARN="arn:aws:sns:ap-northeast-1:832194395201:fujimoto"

          # AWS CLIでSNSトピックに発行
          aws sns publish --topic-arn "$TOPIC_ARN" --message "$MESSAGE_BODY"
      # --------------------------------------------------
      # ステップ?: notify_approval 検証・号口のみ 号口のタスク定義更新前に実施 トピックはapprovalGLとは別。
      # --------------------------------------------------  
      